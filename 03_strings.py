# ============================================
# CLASE 03 - STRINGS EN PYTHON
# ============================================

# Los *strings* (cadenas de texto) son secuencias de caracteres encerradas entre comillas simples o dobles.
# Son uno de los tipos de datos m√°s utilizados en Python.

# ============================================
# üîπ CREACI√ìN Y CONCATENACI√ìN DE STRINGS
# ============================================

my_string = "Hola"
my_other_string = 'Python'

# len() devuelve la longitud (n√∫mero de caracteres) del string
print(len(my_string))          # 4
print(len(my_other_string))    # 6

# Concatenar strings (unir texto)
print(my_string + " " + my_other_string)  # Hola Python

# Tambi√©n se pueden unir varias cadenas
saludo = my_string + " desde " + my_other_string
print(saludo)  # Hola desde Python


# ============================================
# üîπ CARACTERES ESPECIALES
# ============================================

# \n ‚Üí salto de l√≠nea
# \t ‚Üí tabulaci√≥n
# \\ ‚Üí barra invertida literal

new_line = "Este es un texto\ncon salto de l√≠nea"
tab_text = "\tEste texto tiene una tabulaci√≥n"
scape_text = "Este texto contiene una barra invertida: \\"

print(new_line)
print(tab_text)
print(scape_text)


# ============================================
# üîπ FORMATEO DE STRINGS
# ============================================

# Existen tres formas principales de insertar variables dentro de un texto:

name, surname, age = "Eddison", "Guillermo", 25

# 1Ô∏è‚É£ Concatenaci√≥n tradicional
print("Mi nombre es " + name + " " + surname + " y tengo " + str(age) + " a√±os.")

# 2Ô∏è‚É£ M√©todo .format()
print("Mi nombre es {} {} y tengo {} a√±os.".format(name, surname, age))

# 3Ô∏è‚É£ f-Strings (m√°s moderna y recomendada)
print(f"Mi nombre es {name} {surname} y tengo {age} a√±os.")

# Puedes usar expresiones dentro de un f-string
print(f"El pr√≥ximo a√±o tendr√© {age + 1} a√±os.")


# ============================================
# üîπ DESEMPAQUETADO DE CARACTERES
# ============================================

# Se puede asignar cada car√°cter de un string a variables separadas:
language = "python"

a, b, c, d, e, f = language  # cada letra a una variable
print(a)  # p
print(b)  # y


# ============================================
# üîπ SLICING (CORTES DE STRING)
# ============================================

# Permite obtener subcadenas indicando posiciones de inicio y fin: [inicio:fin]

print(language[0:3])   # pyt ‚Üí desde √≠ndice 0 hasta 2
print(language[1:4])   # yth ‚Üí desde √≠ndice 1 hasta 3
print(language[:4])    # pyth ‚Üí desde inicio hasta √≠ndice 3
print(language[2:])    # thon ‚Üí desde √≠ndice 2 hasta el final

# Tambi√©n se puede invertir el texto:
print(language[::-1])  # nohtyp


# ============================================
# üîπ FUNCIONES Y M√âTODOS DE STRINGS
# ============================================

# Los strings tienen muchos m√©todos √∫tiles para manipular texto

text = "python"

print(text.capitalize())   # Python ‚Üí primera letra en may√∫scula
print(text.upper())        # PYTHON ‚Üí todo en may√∫sculas
print(text.lower())        # python ‚Üí todo en min√∫sculas
print(text.count("t"))     # 1 ‚Üí cu√°ntas veces aparece una letra
print("123".isnumeric())   # True ‚Üí todos los caracteres son n√∫meros
print("Hola".isnumeric())  # False
print(text.upper().isupper())  # True ‚Üí ¬øest√° todo en may√∫sculas?
print(text.startswith("p"))    # True ‚Üí ¬øempieza con "p"?
print(text.endswith("n"))      # True ‚Üí ¬øtermina con "n"? 


# ============================================
# üîπ CONCATENACI√ìN, REPETICI√ìN Y CONVERSI√ìN
# ============================================

# Unir texto y n√∫meros
year = 2025
print("Estamos en el a√±o " + str(year))  # Conversi√≥n de int ‚Üí str

# Repetir un texto varias veces
print("Python! " * 3)  # Python! Python! Python!


# ============================================
# üîπ STRINGS MULTIL√çNEA
# ============================================

# Puedes crear un texto que ocupe varias l√≠neas con triple comillas
multi_text = """Hola,
este es un texto
de varias l√≠neas."""
print(multi_text)


# ============================================
# üîπ RESUMEN DE FUNCIONES √öTILES
# ============================================

# len()        ‚Üí longitud del texto
# .upper()     ‚Üí may√∫sculas
# .lower()     ‚Üí min√∫sculas
# .capitalize()‚Üí primera letra may√∫scula
# .count()     ‚Üí contar caracteres
# .isnumeric() ‚Üí verifica si es num√©rico
# .startswith() / .endswith() ‚Üí inicio o fin
# .format() / f"" ‚Üí formateo moderno
# [::]         ‚Üí slicing (corte de texto)
#[::-1]        ‚Üí invertir texto




# ============================================
# EJERCICIO: Presentaci√≥n personal
# ============================================

# Pedimos los datos al usuario
nombre = input("Ingresa tu nombre: ")
apellido = input("Ingresa tu apellido: ")
edad = input("Ingresa tu edad: ")

# Creamos un mensaje formateado con salto de l√≠nea y may√∫sculas
mensaje = f"\nHola, mi nombre es {nombre.capitalize()} {apellido.capitalize()}.\nTengo {edad} a√±os y estoy aprendiendo Python."

# Mostramos el mensaje final
print(mensaje)
